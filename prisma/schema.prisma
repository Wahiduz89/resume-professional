// prisma/schema.prisma - Updated with usage tracking and image storage
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  subscription  Subscription?
  resumes       Resume[]
  downloads     Download[]
  images        UserImage[]
}

model Resume {
  id            String    @id @default(cuid())
  userId        String
  template      String
  content       Json
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id])
  downloads     Download[]
}

model Subscription {
  id            String    @id @default(cuid())
  userId        String    @unique
  status        String    @default("inactive")
  planType      String    @default("student_starter_monthly")
  razorpayId    String?
  expiresAt     DateTime?
  aiDownloadsUsed Int     @default(0)
  totalDownloads  Int     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id])
}

model Download {
  id            String    @id @default(cuid())
  userId        String
  resumeId      String
  template      String
  aiEnhanced    Boolean   @default(false)
  planType      String
  createdAt     DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id])
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model UserImage {
  id        String   @id @default(cuid())
  userId    String
  publicId  String   @unique
  secureUrl String
  format    String
  bytes     Int
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}